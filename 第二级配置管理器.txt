enum {_ALIGN = 8};
enum {_MAX_BYTES = 128};
enum {_NFREELISTS = _MAX_BYTES/_ALIGN};

template<bool threads,int inst>
class _default_alloc_template {
private:
	static size_t ROUNT_UP(size_t bytes)
	{
		return ((bytes)+_ALIGN - 1)&~(_ALIGN - 1));
	}
	static union obj {
		union obj * free_list_link;
		char client_data[1];
	};
	static obj* volatile free_list[_NFREELISTS];
	static size_t FREELIST_INDEX(size_t bytes)
	{
		return ((bytes+_ALIGN-1)/_ALIGN-1);
	}
	//返回大小为n对象，并加入n到其他区块
	static void *refill(size_t n);
	//配置一大块空间，可容纳nobjs个大小为size的空间
	static char *chunk_alloc(size_t size, int &nobjs);

	static char* start_free; //内存池起始位置
	static char *end_free;//内存池终止位置
	static size_t heap_size;
public:
	static void *allocate(size_t n);
	static void deallocate(void *p,size_t n);
	static void *reallocate(void *p, size_t old_sz, size_t new_sz);

};

template <bool threads,int inst>
char *_default_alloc_template<threads, inst>::start_free = 0;

template <bool threads, int inst>
char *_default_alloc_template<threads, inst>::end_free = 0;

template <bool threads, int inst>
char *_default_alloc_template<threads, inst>::heap_size = 0;

template<bool threads, int inst>
_default_alloc_template<threads, inst>::obj * volatile
_default_alloc_template<threads, inst>::free_list[_NFREELISTS] =
{ 0,0,0,0,0,0,0,0, 0,0,0,0, 0,0,0,0 };