//第一级配置器剖析
template<int inst>
class _malloc_alloc_template {
private:
		static void *oom_malloc(size_t);
		static void *oom_realloc(void *, size_t);
		static void(*_malloc_alloc_oom_handler)();
public:
	static void *allocate(size_t n)
	{
		void *result = malloc(n);//第一级配置器直接使用malloc
		if (0 == result)result = oom_malloc(n);
		return result;
	}
	static void deallocate(void *p, size_t)
	{
		free(p);//第一级配置器直接使用free
	}
	static void *reallocate(void *p, size_t, size_t new_sz)
	{
		void *result = realloc(p, new_sz);//第一级配置器直接使用realloc
		if (0 == result)
			result = oom_realloc(p, new_sz);
		return result;
	}

	//模仿C++中的 set_new_handler()。
	static void (* set_malloc_handler(void(*f)()))()
	{
		void(*old)() = _malloc_alloc_oom_handler;
		_malloc_alloc_oom_handler = f;
		return old;
	}
};

template <int inst>
void(*_malloc_alloc_template<inst>::_malloc_alloc_oom_handler)() = 0;

template<int inst>
void * _malloc_alloc_template<int>::oom_malloc(size_t n)
{
	void(*my_malloc_handler)();
	void *result;
	for (;;)
	{
		my_malloc_handler = _malloc_alloc_oom_handler;
		if (0 == my_malloc_handler)
		{
			_THROW_BAD_ALLOC;
		}
		(*my_malloc_handler)();
		result = malloc(n);
		if (result) return result;
	}
}

template<int inst>
void * _malloc_alloc_template<inst>::oom_realloc(void *p, size_t n)
{
	void(*my_malloc_handler)();
	void *reslut;
	for (;;)
	{
		my_malloc_handler = _malloc_alloc_oom_handler;
		if (0 == my_malloc_handler) _THRO_BAD_ALLOC;
		(*my_malloc_hander)();
		result = realloc(p,n);
		if (result) return result;
	}
}